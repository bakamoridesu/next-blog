import Head from "next/head";
import Layout, { siteTitle } from "../components/layout";
import utilStyles from "../styles/utils.module.css";
import Image from "next/image";

export default function Home({ allPostsData }) {
  return (
    <div className={utilStyles.cont}>
      <Head>
        <title>{siteTitle}</title>
      </Head>
      <h1>Умный холодильник Акме</h1>
      <br />
      <h2>Внешний вид и процесс использования</h2>
      <p className={utilStyles.refrigerator}>
        Внешне это обычный холодильник, из заметных отличий - экран с кнопками
        на внешней крышке и небольшие картинки внутри.
      </p>
      <p className={utilStyles.refrigerator}>
        Принцип работы такой: пользователь хранит продукты в упорядоченном виде,
        каждый тип продуктов может находиться только на своей полке, отмеченной
        картинкой с этим типом продуктов. То есть молоко всегда хранится в
        ячейке, где на экране нарисовано молоко, а замороженная зелень не может
        храниться в отсеке для замороженного мяса.
      </p>
      <p className={utilStyles.refrigerator}>
        Когда в холодильнике заканчивается определенный тип продуктов,
        холодильник автоматически заказывает его, либо информирует пользователя
        о том, что собирается заказать определенный продукт. Холодильник
        игнорирует закончившийся продукт, если ячейка не настроена на
        отслеживание наличия продукта. Пользователь настраивает отслеживание и
        уведомление в мобильном приложении. Там же он может выбрать любимые
        товары для каждой категории продуктов, или же просто выбрать тариф,
        согласно которому продукты будут выбираться автоматически.
      </p>
      <Image
        src="/images/holodilnik.png"
        height={694}
        width={995}
        alt=""
        className={utilStyles.holoimage}
      />
      <p className={utilStyles.refrigerator}>
        Описание длинное, но на деле первичная настройка занимает всего
        несколько минут. Тонкую настройку продуктов пользователь производит по
        желанию, потому что исходная конфигурация сформирована на основе анализа
        большого объема данных о том, как люди располагают продукты в
        холодильнике, и полностью готова к использованию.
      </p>
      <p className={utilStyles.refrigerator}>
        После покупки пользователь скачивает мобильное приложение и подключает
        холодильник к телефону по bluetooth. Инструкция для подключения и
        установки – в бумажном буклете.
      </p>
      <p className={utilStyles.refrigerator}>
        Приложение запрашивает адрес. Если по адресу есть доставка, приложение
        предлагает заполнить данные для оплаты и оставить комментарий курьеру.
      </p>
      <div className={utilStyles.twoimages}>
        <Image
          src="/images/address.png"
          height={640}
          width={348}
          alt=""
          className={utilStyles.holoimage}
        />
        <Image
          src="/images/dostavka.png"
          height={640}
          width={363}
          alt=""
          className={utilStyles.holoimage}
        />
      </div>
      <p className={utilStyles.refrigerator}>
        Затем приложение предлагает выбрать тариф. Тариф нужен для
        автоматического заказа еды: в зависимости от тарифа приложение закажет
        либо более качественный и рейтинговый товар, либо товар по скидке
      </p>
      <div className={utilStyles.oneimage}>
        <Image
          src="/images/tarif.png"
          height={640}
          width={391}
          alt=""
          className={utilStyles.holoimage}
        />
      </div>
      <p className={utilStyles.refrigerator}>
        Если службы доставки в районе нет, приложение предложит продолжить без
        доставки. Когда доставка станет возможна, приложение пришлет
        пуш-сообщение, а при первом открытии попросит настроить доставку.
      </p>
      <div className={utilStyles.oneimage}>
        <Image
          src="/images/bez-dostavki.png"
          height={640}
          width={359}
          alt=""
          className={utilStyles.holoimage}
        />
      </div>
      <p className={utilStyles.refrigerator}>
        В обоих случаях доступен виджет со списком покупок, он формируется
        автоматически.
      </p>
      <p className={utilStyles.refrigerator}>
        Виджет полезен родителям, которых весь день нет дома. Дети приходят из
        школы в полдень, и употребляют продукты до вечера. Когда родители
        возвращаются домой, то видят, какие продукты закончились за день.
      </p>
      <p className={utilStyles.refrigerator}>
        Также виджет поможет с составлением списка покупок: туда останется
        добавить только продукты, которые не хранятся в холодильнике
      </p>
      <div className={utilStyles.oneimage}>
        <Image
          src="/images/widget.png"
          height={640}
          width={359}
          alt=""
          className={utilStyles.holoimage}
        />
      </div>
      <p className={utilStyles.refrigerator}>
        После первоначальной настройки открывается экран управления
        холодильником. Здесь пользователь выбирает, за какими продуктами будет
        следить холодильник. Если продукт нужен не всегда, можно попросить
        холодильник не заказывать его автоматически, а прислать уведомление при
        создании заказа.
      </p>
      <div className={utilStyles.oneimage}>
        <Image
          src="/images/app1.png"
          height={640}
          width={345}
          alt=""
          className={utilStyles.holoimage}
        />
      </div>
      <p className={utilStyles.refrigerator}>
        По умолчанию применены наиболее частые настройки. Пользователь может их
        оставить, а может настроить под свои нужды.
      </p>
      <p className={utilStyles.refrigerator}>
        Нажатие на ячейку с картинкой выделяет ее(зажигает зеленым) или снимает
        выделение. Выделенная зеленым ячейка означает, что когда продукты внутри
        ячейки закончатся, холодильник закажет их в магазине. Ячейки можно
        менять местами перетаскиванием. Долгое нажатие на ячейку открывает
        контекстное меню.
      </p>
      <div className={utilStyles.threeimages}>
        <Image
          src="/images/app3.png"
          height={640}
          width={383}
          alt=""
          className={utilStyles.holoimage}
        />
        <Image
          src="/images/app4.png"
          height={640}
          width={356}
          alt=""
          className={utilStyles.holoimage}
        />
        <Image
          style={{ marginLeft: "30px" }}
          src="/images/app2.png"
          height={640}
          width={363}
          alt=""
          className={utilStyles.holoimage}
        />
      </div>
      <p className={utilStyles.refrigerator}>
        Любое изменение настроек ячеек отображается внутри холодильника.
        Внутренние дисплеи всегда показывают картинку, соответствующую
        выбранному типа продукта для ячейки.
      </p>
      <Image
        style={{ marginLeft: "30px" }}
        src="/images/close.png"
        height={780}
        width={920}
        alt=""
        className={utilStyles.holoimage}
      />
      <p className={utilStyles.refrigerator}>
        Когда все настройки завершены, пользователю остается лишь включить
        автоматическую доставку. С этого момента холодильник начнет следить за
        наличием подсвеченных продуктов и заказывать их по мере необходимости.
        От пользователя требуется только сопоставлять продукт и картинку в
        ячейке холодильника, и класть продукты в правильные ячейки.
      </p>
      <p className={utilStyles.refrigerator}>
        Если в списке закончившихся продуктов есть продукт, для которого
        настроено уведомление, то заказ не будет создан автоматически. Вместо
        этого, список отобразится в приложении и на экране холодильника. В
        списке можно выбрать количество заказываемых товаров, а в мобильном
        приложении можно заменить товар на другой или добавить другие товары в
        заказ.
      </p>
      <div className={utilStyles.oneimage}>
        <Image
          src="/images/ekran.png"
          height={446}
          width={653}
          alt=""
          className={utilStyles.holoimage}
        />
      </div>
      <div className={utilStyles.oneimage}>
        <Image
          src="/images/zakaz.png"
          height={640}
          width={375}
          alt=""
          className={utilStyles.holoimage}
        />
      </div>
      <h2>Как это работает</h2>
      <p className={utilStyles.refrigerator}>
        Холодильник состоит из ячеек. Каждый этаж холодильника, морозильной
        камеры и дверцы делится на 2 ячейки. В каждой ячейке есть камера и
        OLED-дисплей. Камера делает снимок каждый раз, когда срабатывает датчик
        закрытия двери, за мгновение до выключения света в холодильнике. Дисплей
        отображает тип продукта, который должен храниться в ячейке.
      </p>
      <Image
        src="/images/holodilnik-explained.png"
        height={705}
        width={907}
        alt=""
        className={utilStyles.holoimage}
      />
      <p className={utilStyles.refrigerator}>
        Одной ячейкой управляет один контроллер ESP-32. К нему подключается одна
        камера и один дисплей. Все контроллеры объединяются в сеть с помощью
        протокола ESP-NOW
      </p>
      <Image src="/images/esp-now.webp" height={375} width={649} alt="" />
      <a href="https://randomnerdtutorials.com/esp-now-many-to-one-esp32/">
        https://randomnerdtutorials.com/esp-now-many-to-one-esp32/
      </a>
      <br />
      <br />
      <p className={utilStyles.refrigerator}>
        Когда дверь холодильника закрывается, камеры делают снимок. Контроллер
        ячейки получает данные с камеры, отрезает ненужные пиксели, сжимает
        картинку (до 3-5 кб), и отправляет в главный контроллер. Затем главный
        контроллер упаковывает данные со всех ячеек в один HTTP-запрос, и
        отправляет их на сервер через вайфай.
      </p>
      <p className={utilStyles.refrigerator}>
        В запросе присутствует id пользователя (получается через Эппл стор или
        Плей маркет), а также массив данных с камер (в каждой ячейке массива
        присутствует номер камеры и картинка). Проверка происходит с помощью
        любого стандартного алгоритма машинного обучения, который сравнивает
        картинки в низком разрешении. Его задача - просто отличить пустую полку
        от непустой. Сервер знает, какие продукты где лежат, т.к получил эти
        данные из приложения. После обработки запроса, сервер присылает в ответе
        список закончившихся продуктов.
      </p>
      <br />
      <Image src="/images/shema.png" height={681} width={816} alt="" />
      <p className={utilStyles.desc}>
        краткая схема обмена данными между сервером, приложением и холодильником
      </p>
      <h2>Стоимость инноваций</h2>
      <p className={utilStyles.refrigerator}>
        Будем учитывать только дополнительные расходы на оборудование одного
        холодильника. Стоимость сервера и разработки приложения можно
        пренебречь, потому что продукт массовый.
      </p>
      <p className={utilStyles.refrigerator}>
        В холодильнике всего 20 ячеек: 8 в главном отделении, 8 на дверце и 4 в
        морозильной камере. На каждую ячейку нужен 1 контроллер ESP-32, один
        дисплей и одна камера. Плюс, один контроллер выступает в роли главного и
        заодно управляет внешним дисплеем.
      </p>
      <p className={utilStyles.refrigerator}>
        Считаем сумму по каждому устройству исходя из розничной стоимости:
      </p>
      <table cellSpacing={20}>
        <thead>
          <th>Устройство</th>
          <th>Количество</th>
          <th>Розничная цена, ₽</th>
          <th>Стоимость, ₽</th>
        </thead>
        <tbody>
          <tr>
            <td>Контроллер ESP-32</td>
            <td>21</td>
            <td>300</td>
            <td>6,300</td>
          </tr>
          <tr>
            <td>Модуль камеры</td>
            <td>20</td>
            <td>140</td>
            <td>2,800</td>
          </tr>
          <tr>
            <td>Мини OLED дисплей</td>
            <td>20</td>
            <td>125</td>
            <td>2,500</td>
          </tr>
          <tr>
            <td>Внешний OLED дисплей</td>
            <td>1</td>
            <td>500</td>
            <td>500</td>
          </tr>
          <tr>
            <td>
              <b>Сумма</b>
            </td>
            <td>-</td>
            <td>-</td>
            <td>
              <b>12,100</b>
            </td>
          </tr>
        </tbody>
      </table>
      <p className={utilStyles.refrigerator}>
        Получилось <b>12,100₽</b>. Но это розничная цена. Компания будет
        закупать эту электронику оптом, поэтому смело делим на 2, получаем{" "}
        <b>6,050₽</b>.
      </p>
      <p className={utilStyles.refrigerator}>
        Так как электронику поставляет китайская компания прямо с завода, то
        можно договориться, чтобы 20 периферийных контроллеров изготавливались
        без процессора, и использовались только для приема и трансляции сигнала.
        В таком случае обрезанием картинок с камер будет заниматься основной
        контроллер, но компания сэкономит на периферийных контроллерах, которые
        теперь будут стоить вдвое дешевле. Отнимаем еще <b>1,500Р</b> от оптовой
        цены и получаем <b>4,050Р</b>. Именно столько составит увеличение
        себестоимости одного холодильника без учета расходов на разработку
        приложения и обслуживание сервера.
      </p>
      <p className={utilStyles.refrigerator}>
        Можно снизить цену еще сильнее, если разработать плату для контроллера,
        которая будет принимать 20 сигналов с камер и отправлять сигнал на 21
        дисплей. Так как производство холодильников массовое, то и договориться
        с заводом о выпуске такого контроллера можно будет без особых проблем.
      </p>
      <h2 style={{marginTop:'50px'}}>Альтернативное решение и его минусы.</h2>
      <p className={utilStyles.refrigerator}>
        Существуют алгоритмы распознавания изображений, и в данном случае можно
        было бы их использовать для распознавания продуктов в холодильнике.
        Тогда отпадала бы необходимость в присвоении каждому продукту своей
        ячейки, так как камеры общими усилиями распознавали бы весь массив
        продуктов, имеющихся в холодильнике.
      </p>
      <p className={utilStyles.refrigerator}>
        Это дало бы возможность убрать экраны из холодильника и упростить
        приложение, но минусы были бы более существенными:
      </p>
      <ul>
        <li className={utilStyles.refrigerator}>
          Распознавание картинок требует много вычислительных ресурсов, в
          отличие от простого классификатора, который отличает пустую полку от
          непустой. Это создаст большую нагрузку на сервер, учитывая массовость
          производства холодильников. Придется вместо обычного сервера создавать
          собственный вычислительный центр или арендовать мощности в облаке, а
          это всё дополнительные расходы.
        </li>
        <li className={utilStyles.refrigerator}>
          Системное хранение продуктов в холодильнике с помощью
          картинок-подсказок приносит немного упорядоченности в жизнь
          пользователя. Если убрать подсказки и положиться полностью на
          искуственный интеллект, то повышается вероятность того, что в
          холодильнике будет беспорядок. Беспорядок создаст нагрузку как на мозг
          человека, так и на механизм распознавания изображений, который в особо
          запущенных случаях будет давать сбой.
        </li>
      </ul>
      <p className={utilStyles.refrigerator}>
        Ввиду указанных недостатков, я решил не использовать передовые
        технологии даже в будущем, и остановился на простом, но надежном
        решении, которое возможно уже в настоящем.
      </p>
    </div>
  );
}
